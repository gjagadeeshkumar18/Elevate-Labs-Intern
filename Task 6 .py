# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p1agAgn-plvFRn1MASDL2k9VJlfWUEvx
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score,confusion_matrix

df=pd.read_csv('/content/Iris.csv')

df

df.head()

df.tail()

df.info()

df.describe()

df.isnull().sum().sum()

df.duplicated().sum()

num_cols = df.select_dtypes(include=['number']).columns.tolist()
print(df[num_cols].describe())
for col in num_cols:
    plt.figure(figsize=(6, 4))
    sns.histplot(df[col], kde=True, bins=30)
    plt.title(f"Distribution of {col}", fontsize=14)
    plt.xlabel(col)
    plt.ylabel("Count")
    plt.tight_layout()
    plt.show()

for col in num_cols:
    sns.boxplot(x=df[col])
    plt.title(f"Outliers in {col}")
    plt.show()

for col in num_cols:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    df = df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]
print("Dataset shape after removing outliers:", df.shape)

cat_cols = df.select_dtypes(include=['object']).columns.tolist()
cat_cols

le= LabelEncoder()
for col in cat_cols:
  df[col] = le.fit_transform(df[col])

df

x = df.drop(columns=['Species', 'Id'])
y = df['Species']

x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=42,test_size=0.2)

model=KNeighborsClassifier()
model.fit(x_train,y_train)

y_predict= model.predict(x_test)

y_pred = le.inverse_transform(y_predict)
print("Predicted labels:", y_pred)

acc = accuracy_score(y_test, y_predict)
print("Accuracy:", acc)

cm = confusion_matrix(y_test, y_predict)
print("Confusion Matrix:\n", cm)

print("Labels order:", le.classes_)